Ideja par python spy botu tika scrappota :D

1) Izveidot datubāzi (SQLite) vai JSON failu, lai saglabātu iepirkumu sarakstu
Izveidot SQLite datubāzi (shopping_list.db).

Vai arī izvēlēties alternatīvu pieeju un izveidot JSON failu (shopping_list.json).

Pārbaudīt datu glabāšanas struktūru (produkti, piegādes datums, daudzums).

2) Izveidot funkcionalitāti, lai pievienotu preces iepirkumu sarakstam
Rakstīt funkciju add_item(), kas pieņem preces nosaukumu, daudzumu un piegādes datumu.

Validēt ievadītos datus (piemēram, vai piegādes datums ir derīgs un daudzums ir vesels skaitlis).

Pievienot preces datus datubāzē vai JSON failā.

3) Izveidot funkcionalitāti, lai skatītu visus pievienotos produktus
Rakstīt funkciju view_items(), lai parādītu visus produktus, kas ir saglabāti datubāzē vai JSON failā.

Pārbaudīt, vai saraksts ir tukšs un atgriezt atbilstošu ziņu.

4) Izveidot atgādinājumu funkciju par tuvojošos piegādes termiņu
Rakstīt funkciju remind_items(), lai pārbaudītu, kuriem produktiem piegādes datums ir tuvāk par 3 dienām.

Šī funkcija izvadīs atgādinājumu par produktiem, kuru piegādes termiņš tuvojas.

5) Validācija un ievades pārbaude
Nodrošināt, ka visi ievadītie dati ir pareizi validēti:

Preces nosaukums nedrīkst būt tukšs.

Piegādes datums ir derīgs (piemēram, tas nav pagātne).

Daudzums ir vesels skaitlis.

Ievadīt kļūdu ziņojumus, ja dati ir nederīgi.

6) Izveidot lietotāja interfeisu (CLI vai GUI)
Izveidot pamata komandrindas interfeisu (CLI), kur lietotājs var ievadīt preces, skatīt sarakstu un saņemt atgādinājumus.

Ja ir vairāk laika, iespējams pievienot vienkāršu grafisko lietotāja saskarni (GUI), izmantojot tkinter.

7) Datu saglabāšana un ielāde pēc startēšanas
Nodrošināt, lai dati tiktu saglabāti uzreiz pēc izmaiņām.

Ielādēt datus no datubāzes vai JSON faila, kad programma tiek palaista.

8) Testēšana un kļūdu novēršana
Testēt visus scenārijus:

Pieprasīt un pievienot preces.

Skatīt un izdzēst preces.

Saņemt atgādinājumus par piegādes datumiem.

Ievērot, ka kods ir bez kļūdām, un nav iespējams veikt darbības ar nederīgiem datiem.

9) Pabeigt darbu un veikt izmaiņas GitHub repozitorijā
Veikt vairākas iterācijas, pievienojot funkcijas, uzlabojot kodu un veiksmīgi dokumentējot darbu.

Izveidot komitus GitHub repozitorijā un saglabāt visus kodēšanas soļus.

10) Piestrādāt pie vizuālā noformējuma (ja laiks atlicis)
Ja ir laiks, uzlabot lietotāja saskarni, pievienot krāsas un izkārtojumu, lai tas būtu lietotājam draudzīgāks.

Ja tiek izmantots CLI, var pievienot krāsainus tekstus, izmantojot bibliotēku colorama.
